var documenterSearchIndex = {"docs":
[{"location":"#NautyGraphs.jl","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"","category":"section"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"NautyGraphs.jl is a Julia interface to the popular graph isomorphism tool nauty by Brendan McKay. It allows for efficient isomorphism checking, canonical labeling, and hashing of vertex-labeled graphs. In addition, NautyGraphs.jl is fully compatible with the Graphs.jl API. This makes it easy to create or modify graphs through familiar syntax, and allows NautyGraphs to work with a large library of graph algorithms. Warning: NautyGraphs.jl currently does not work on Windows.","category":"page"},{"location":"#Installation","page":"NautyGraphs.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"To install NautyGraphs.jl from the Julia REPL, press ] to enter Pkg mode, and then run","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"pkg> add NautyGraphs","category":"page"},{"location":"#Basic-Usage","page":"NautyGraphs.jl","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"NautyGraphs.jl defines the NautyGraph or NautyDiGraph graph formats, which can be constructed and modified in the same way as regular Graphs from Graphs.jl:","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"using NautyGraphs, Graphs\n\nA = [0 1 0 0;\n     1 0 1 1;\n     0 1 0 1;\n     0 1 1 0]\ng = NautyGraph(A)\n\nh = NautyGraph(4)\nfor edge in [(2, 4), (4, 1), (4, 3), (1, 3)]\n  add_edge!(h, edge)\nend","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"Internally, a NautyGraph is represented as a bit vector, so that it can be passed directly to nauty without any conversion. To check whether two graphs are isomorphic, use is_isomorphic or ≃ (\\simeq):","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"julia> g ≃ h\ntrue\n\njulia> adjacency_matrix(g) == adjacency_matrix(h)\nfalse","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"Use canonize!(g) to reorder g into canonical order. canonize!(g) also returns the permutation needed to canonize g:","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"julia> canonize!(g)\n[1, 3, 4, 2]\n\njulia> canonize!(h)\n[2, 1, 3, 4]\n\njulia> adjacency_matrix(g) == adjacency_matrix(h)\ntrue","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"Isomorphisms can also be computed by comparing hashes. ghash(g) computes the canonical representative of a graph's isomorphism class and then hashes the canonical adjacency matrix and vertex labels.","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"julia> ghash(g)\n0x3127d9b726f2c846\njulia> ghash(h)\n0x3127d9b726f2c846","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"Graph hashes make it possible to quickly compare large numbers of graphs for isomorphism. Simply compute all hashes and filter out the duplicates!","category":"page"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"To obtain information about a graph's automorphism group, use nauty(g). This will return the canonical permutation as well as an AutomorphismGroup object. Right now, the recorded properties of the automorphism group are very limited and only include the group size and orbits, but this will change in the future.","category":"page"},{"location":"#See-also","page":"NautyGraphs.jl","title":"See also","text":"","category":"section"},{"location":"","page":"NautyGraphs.jl","title":"NautyGraphs.jl","text":"nauty & traces\nNauty.jl\nNautyTraces.jl\nGraphs.jl","category":"page"}]
}
